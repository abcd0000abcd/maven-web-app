currentBuild.displayName = "Build : "+currentBuild.number
pipeline{
    agent any
    tools {
        maven "MAVEN3"
    }
    stages{
        stage('Git Checkout'){
            steps{
                git credentialsId: 'Git_Pwd', url: 'https://github.com/abcd0000abcd/hello-world.git'
            }
        }
        stage('Maven build'){
            steps{
                //mvn clean: the project is cleaned to remove all previous-build files generated.
                //mvn install: command helps deploys the packaged WAR/JAR files storing them as classes in the local repository.
                sh 'mvn clean install -DskipTests'
            }
            post{
                success{
                    echo 'now Archiving it..'
                    archiveArtifacts artifacts: '**/target/*.war'
                    sh 'mv **/target/*.war webapp/target/proj-2.war'
                }
            }
        }
        stage('Unit testing'){
            steps{
                //mvn test : With this command, one can run project testing steps
                sh 'mvn test'
            }
        }
        stage ('code analysis'){ 
            steps{
                script{
                    withSonarQubeEnv(credentialsId: 'Sonar-Tokan') {
                    sh 'mvn sonar:sonar'
                    }
                }
                
            }
        }
        stage("Quality Gate") {
            steps {
              timeout(time: 1, unit: 'HOURS') {
                waitForQualityGate abortPipeline: true
              }
            }
        }
        stage('Upload Artifact Nexus') {
            steps {
                script {
                    def serverPwd = 'Nexus-PWD' // Nexus server configuration in Jenkins
                    def nexusUrl = '192.168.0.106:8081' // Nexus server URL
                    def repository = 'cicd-project' // Nexus repository name
                    def groupId = 'in.cicd-2' // Artifact group ID
                    def artifactId = 'proj-2' // Artifact ID
                    def version = '1.0-SNAPSHOT' // Artifact version
                    def file = 'webapp/target/proj-2.war'
              
            // Upload the artifact to Nexus
            
                nexusArtifactUploader(
                  nexusVersion: 'nexus3',
                  protocol: 'http', // Use 'https' if applicable
                  nexusUrl: nexusUrl,
                  groupId: groupId,
                  version: "${env.BUILD_ID} - ${env.BUILD_TIMESTAMP}",
                  repository: repository,
                  credentialsId: serverPwd,
                  artifacts: [
                    [artifactId: artifactId, 
                     classifier: '', 
                     file: "webapp/target/${artifactId}.war", // Path to the artifact file 
                     type: 'war']
                     ]
                )
                }
                //script {
                  //  def server = 'Nexus-PWD' // Nexus server configuration in Jenkins
                    //def nexusUrl = '192.168.0.106:8081' // Nexus server URL
                    //def repository = 'cicd-project' // Nexus repository name
                    //def groupId = 'cicd-2' // Artifact group ID
                    //def artifactId = 'in.proj-2' // Artifact ID
                    //def version = '1.0-SNAPSHOT' // Artifact version
          
          // Construct the artifact path
                    
             //       def artifactPath = "${groupId.replace('.', '/')}/${artifactId}/${version}/${artifactId}-${version}.jar"
        
          // Upload the artifact to Nexus
               //     nexusArtifactUploader(
                 //   nexusVersion: 'nexus3', // Specify Nexus version (nexus2 or nexus3)
                  // // protocol: 'http', // Use 'https' if applicable
                   // nexusUrl: nexusUrl,
                    //groupId: groupId,
                   // version: version,
                    //repository: repository,
                    //file: "webapp/target/${artifactId}-${version}.war", // Path to the artifact file
                    //artifact: artifactPath,
                    //credentialsId: server
                 //   )
                //}
            }
        }
    }           
}
    
    
